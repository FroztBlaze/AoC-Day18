This logsheet will be updated after every major commit with the work and my thoughts.



Log #1:
My objective is to do this in the most efficient way possible.

Prior to starting coding, I had a thought about the strategy. Here is what I came up with:
	- Loop through the list of cube coordinates
	- At each cube, check whether the neighbouring cubes are in the list of cubes
	- Each time no cube is neighbouring, add one to the counter of exposed sides.
	
There are two pitfalls I have thought about:
	- I am unsure how I can avoid checking the same direction twice.
	- The above method does not work for hollow objects since it will count the inner exposed 
	  surface area as well as the outer exposed surface area. My understanding of this problem is
	  that we want the outer exposed area only, but I will implement this additional functionality
	  only if necessary, after the original problem is solved.
	  
First idea to avoid repeating checks:
	- If a block is right next to another block, the next block to be analyzed will be adjacent to the original block.
	- There will be two lists. One list of the remaining blocks to be analyzed, and one list of all of the blocks.
	


Log #2 (Mon 3rd April 2023):
	- I wrote a function that is able to split a line from a file in ".CSV" format, which is what the input data is 
	  saved as.
	- I wrote a unit test for that function that runs within "main". (If necessary, I could switch to GoogleTest later).
	- I wrote a function that is able to read an input file in the required format. I also wrote a test for this.
	- The second test lead to a bugfix in "split_csv_test()".
	- With tests passing, utils should be finished. This code is now cleared to be merged with "master".



Log #3 (Sat 8th April 2023):
	- Rebased some code for clarity
	- Changed the format of the coordinate container from an std::vector to an std::set because searching the latter is 
	  O(logn) while searching the former is O(n). See: https://stackoverflow.com/a/3451045
	- Attempted a solution that counts all of the neighbours of each block to determine how many free sides each block has.
	  This works for the long test case given, but not for the actual input and I do not know why.